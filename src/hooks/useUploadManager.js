import { useCallback } from "react";
import { showError, showSuccess, showInfo } from "@/components/Toast";
import * as services from "@/services";
import { useApp } from "@/context/AppContext";
import { useStreakToDay } from "./useStreak";

export const useUploadManager = () => {
  const {
    preview,
    selectedFile,
    isSizeMedia,
    postOverlay,
    audience,
    selectedRecipients,
    maxImageSizeMB,
    maxVideoSizeMB,
    setuploadPayloads,
  } = useApp().post;
  const isStreaktoday = useStreakToDay();
  
  const handleSubmit = useCallback(async () => {
    if (!selectedFile) {
      showError("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫£i l√™n.");
      return;
    }

    const { type: previewType } = preview || {};
    const isImage = previewType === "image";
    const isVideo = previewType === "video";
    const maxFileSize = isImage ? maxImageSizeMB : maxVideoSizeMB;

    if (isVideo && isSizeMedia < 0.2) {
      showError("Video qu√° nh·∫π ho·∫∑c kh√¥ng h·ª£p l·ªá (d∆∞·ªõi 0.2MB).");
      return;
    }
    if (isSizeMedia > maxFileSize) {
      showError(
        `${
          isImage ? "·∫¢nh" : "Video"
        } v∆∞·ª£t qu√° dung l∆∞·ª£ng. T·ªëi ƒëa ${maxFileSize}MB.`
      );
      return;
    }

    try {
      // B·∫Øt ƒë·∫ßu loading
      setUploadLoading(true);
      setIsSuccess(false);

      // T·∫°o payload
      const payload = await services.createRequestPayloadV5(
        selectedFile,
        previewType,
        postOverlay,
        audience,
        selectedRecipients,
        isStreaktoday
      );

      if (!payload) {
        throw new Error("Kh√¥ng t·∫°o ƒë∆∞·ª£c payload. H·ªßy ti·∫øn tr√¨nh t·∫£i l√™n.");
      }

      // Th√™m th√¥ng tin b·ªï sung v√†o payload
      payload.contentType = previewType;
      payload.createdAt = new Date().toISOString();
      payload.status = "uploading"; // ƒê√°nh d·∫•u tr·∫°ng th√°i l√† ƒëang upload

      // L∆∞u payload v√†o localStorage
      const savedPayloads = JSON.parse(
        localStorage.getItem("uploadPayloads") || "[]"
      );
      savedPayloads.push(payload);
      localStorage.setItem("uploadPayloads", JSON.stringify(savedPayloads));
      setuploadPayloads(savedPayloads);

      // K·∫øt th√∫c loading v√† hi·ªÉn th·ªã success
      setUploadLoading(false);
      setIsSuccess(true);

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      showSuccess(
        `ƒê√£ ƒë∆∞a b√†i v√†o h√†ng ch·ªù. T·ªïng c·ªông ${savedPayloads.length} b√†i ƒëang ch·ªù x·ª≠ l√Ω.`
      );

      // Reset success state sau 1 gi√¢y
      setTimeout(() => {
        setIsSuccess(false);
        handleDelete();
      }, 1000);

      // T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng ƒë·ª£i n·∫øu ch∆∞a ch·∫°y
      if (!isProcessingQueue) {
        console.log("üöÄ T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng ƒë·ª£i upload...");
        setTimeout(() => {
          handleQueueUpload();
        }, 1500); // Delay nh·ªè ƒë·ªÉ UI k·ªãp c·∫≠p nh·∫≠t
      }
    } catch (error) {
      setUploadLoading(false);
      setIsSuccess(false);

      const errorMessage =
        error?.response?.data?.message || error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      showError(`T·∫°o payload th·∫•t b·∫°i: ${errorMessage}`);

      console.error("‚ùå T·∫°o payload th·∫•t b·∫°i:", error);
    }
  }, [
    selectedFile,
    preview,
    postOverlay,
    audience,
    selectedRecipients,
    isSizeMedia,
    maxImageSizeMB,
    maxVideoSizeMB,
    isStreaktoday,
    setuploadPayloads,
    setUploadLoading,
    setIsSuccess,
    handleDelete,
    handleQueueUpload,
    isProcessingQueue,
  ]);

  const retryFailedUploads = useCallback(() => {
    const failedUploads = JSON.parse(
      localStorage.getItem("failedUploads") || "[]"
    );

    if (failedUploads.length === 0) {
      showInfo("Kh√¥ng c√≥ b√†i n√†o b·ªã l·ªói ƒë·ªÉ th·ª≠ l·∫°i.");
      return;
    }

    // Chuy·ªÉn c√°c payload b·ªã l·ªói v·ªÅ h√†ng ƒë·ª£i ch√≠nh
    const pendingPayloads = JSON.parse(
      localStorage.getItem("uploadPayloads") || "[]"
    );
    const retryPayloads = failedUploads.map((item) => item.payload);

    pendingPayloads.push(...retryPayloads);
    localStorage.setItem("uploadPayloads", JSON.stringify(pendingPayloads));

    // X√≥a danh s√°ch l·ªói
    localStorage.removeItem("failedUploads");

    showSuccess(
      `ƒê√£ ƒë∆∞a ${failedUploads.length} b√†i b·ªã l·ªói v√†o h√†ng ƒë·ª£i ƒë·ªÉ th·ª≠ l·∫°i.`
    );

    // T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu x·ª≠ l√Ω n·∫øu ch∆∞a ch·∫°y
    if (!isProcessingQueue) {
      setTimeout(() => {
        handleQueueUpload();
      }, 1000);
    }
  }, [isProcessingQueue, handleQueueUpload]);

  const clearAllQueues = useCallback(() => {
    localStorage.removeItem("uploadPayloads");
    localStorage.removeItem("failedUploads");
    showSuccess("ƒê√£ x√≥a t·∫•t c·∫£ h√†ng ƒë·ª£i upload.");
  }, []);

  return {
    handleSubmit,
    retryFailedUploads,
    clearAllQueues,
  };
};
