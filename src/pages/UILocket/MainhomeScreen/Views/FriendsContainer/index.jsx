import { useContext, useEffect, useRef, useState } from "react";
import { useApp } from "@/context/AppContext";
import { AuthContext } from "@/context/AuthLocket";
import { RefreshCcw, X } from "lucide-react";
import { FaUserFriends, FaSearchPlus } from "react-icons/fa";
import { FindFriendByUserName, refreshFriends, removeFriend } from "@/services";
import LoadingRing from "@/components/ui/Loading/ring";
import FriendItem from "./FriendItem";
import SearchInput from "@/components/ui/Input/SearchInput";
import { showError } from "@/components/Toast";
import FriendFind from "./FriendFind";
import IncomingFriendRequests from "./IncomingRequests";

const FriendsContainer = () => {
  const { user, friendDetails, setFriendDetails } = useContext(AuthContext);
  const popupRef = useRef(null);
  const { navigation } = useApp();
  const { isFriendsTabOpen, setFriendsTabOpen, isPWA } = navigation;
  const [showAllFriends, setShowAllFriends] = useState(false);

  const [startY, setStartY] = useState(null);
  const [currentY, setCurrentY] = useState(0);
  const [isDragging, setIsDragging] = useState(false);

  // State t√¨m ki·∫øm
  const [searchTerm, setSearchTerm] = useState("");

  const [lastUpdated, setLastUpdated] = useState(null);
  const [isFocused, setIsFocused] = useState(null);

  const [searchTermFind, setSearchTermFind] = useState("");
  const [isFocusedFind, setIsFocusedFind] = useState(null);

  useEffect(() => {
    const updated = localStorage.getItem("friendsUpdatedAt");
    if (updated) {
      setLastUpdated(updated);
    }
  }, []);

  // Khi m·ªü tab th√¨ reset tr·∫°ng th√°i k√©o
  useEffect(() => {
    if (isFriendsTabOpen) {
      document.body.classList.add("overflow-hidden");
      setCurrentY(0);
    } else {
      document.body.classList.remove("overflow-hidden");
      setCurrentY(0);
      setSearchTerm(""); // reset search khi ƒë√≥ng tab
    }
    return () => {
      document.body.classList.remove("overflow-hidden");
    };
  }, [isFriendsTabOpen]);

  const handleTouchStart = (e) => {
    setStartY(e.touches[0].clientY);
    setIsDragging(true);
  };

  const handleTouchMove = (e) => {
    if (!isDragging || startY === null) return;
    const touchY = e.touches[0].clientY;
    const deltaY = touchY - startY;

    if (deltaY > 0) {
      const maxDrag = window.innerHeight * 0.86; // t∆∞∆°ng ƒë∆∞∆°ng h-[86vh]
      setCurrentY(Math.min(deltaY, maxDrag));
    }
  };

  // Load friendDetails t·ª´ localStorage khi component mount ho·∫∑c tab m·ªü
  useEffect(() => {
    if (isFriendsTabOpen) {
      const savedDetails = localStorage.getItem("friendDetails");
      if (savedDetails) {
        setFriendDetails(JSON.parse(savedDetails));
      }
    }
  }, [isFriendsTabOpen]);

  const handleTouchEnd = () => {
    const popupHeight = window.innerHeight * 0.86;
    const halfway = popupHeight / 2;

    if (currentY > halfway) {
      setFriendsTabOpen(false); // ƒê√≥ng n·∫øu k√©o qu√° n·ª≠a popup
      setShowAllFriends(false);
    } else {
      setCurrentY(0); // K√©o ch∆∞a ƒë·ªß ‚Üí tr·ªü l·∫°i v·ªã tr√≠ c≈©
    }

    setIsDragging(false);
    setStartY(null);
  };

  const translateStyle = {
    transform: `translateY(${
      isFriendsTabOpen ? currentY : window.innerHeight
    }px)`,
    transition: isDragging ? "none" : "transform 0.3s ease-out",
  };

  // Filter b·∫°n b√® theo t√™n ho·∫∑c username
  const filteredFriends = friendDetails.filter((friend) => {
    const fullName = `${friend.firstName} ${friend.lastName}`.toLowerCase();
    const username = (friend.username || "").toLowerCase();
    const term = searchTerm.toLowerCase();

    return fullName.includes(term) || username.includes(term);
  });
  const visibleFriends = showAllFriends
    ? filteredFriends
    : filteredFriends.slice(0, 3);

  const [isRefreshing, setIsRefreshing] = useState(false);

  const handleRefreshFriends = async () => {
    try {
      setIsRefreshing(true); // B·∫Øt ƒë·∫ßu loading
      console.log("üîÑ ƒêang l√†m m·ªõi danh s√°ch b·∫°n b√®...");

      const result = await refreshFriends();

      if (result) {
        alert("‚úÖ ƒê√£ l√†m m·ªõi danh s√°ch b·∫°n b√®!");
        setFriendDetails(result?.friendDetails);
        setLastUpdated(result?.updatedAt);
      } else {
        alert("‚ö†Ô∏è Kh√¥ng th·ªÉ l√†m m·ªõi danh s√°ch b·∫°n b√®.");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l√†m m·ªõi b·∫°n b√®:", error);
      alert("‚ùå C√≥ l·ªói x·∫£y ra khi l√†m m·ªõi danh s√°ch.");
    } finally {
      setIsRefreshing(false); // K·∫øt th√∫c loading
    }
  };
  const handleDeleteFriend = async (uid) => {
    const confirmed = window.confirm("‚ùìB·∫°n c√≥ ch·∫Øc mu·ªën xo√° ng∆∞·ªùi b·∫°n n√†y?");
    if (!confirmed) return;

    try {
      console.log("üóëÔ∏è ƒêang x√≥a b·∫°n v·ªõi uid:", uid);

      const result = await removeFriend(uid); // G·ª≠i request x√≥a b·∫°n t·ª´ server

      if (result?.success) {
        // ‚úÖ C·∫≠p nh·∫≠t l·∫°i state & localStorage
        const updatedFriends = friendDetails.filter((f) => f.uid !== uid);
        setFriendDetails(updatedFriends);
        localStorage.setItem("friendDetails", JSON.stringify(updatedFriends));
        alert("‚úÖ ƒê√£ xo√° b·∫°n th√†nh c√¥ng.");
      } else {
        alert("‚ö†Ô∏è Kh√¥ng th·ªÉ xo√° b·∫°n (c√≥ th·ªÉ ƒë√£ b·ªã xo√° t·ª´ tr∆∞·ªõc).");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi xo√° b·∫°n:", error);
      alert("‚ùå C√≥ l·ªói x·∫£y ra khi xo√° b·∫°n.");
    }
  };

  const [foundUser, setFoundUser] = useState(null); // L∆∞u user t√¨m ƒë∆∞·ª£c

  const handleFindFriend = async (searchTermFind) => {
    try {
      //setIsLoading(true); // n·∫øu c√≥
      const result = await FindFriendByUserName(searchTermFind); // g·ªçi service API

      setFoundUser(result); // l∆∞u v√†o state
    } catch (error) {
      console.error("‚ùå L·ªói khi t√¨m b·∫°n:", error);
      setFoundUser(null); // reset n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c
      showError(error.message || "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
    } finally {
      //setIsLoading(false); // n·∫øu c√≥
    }
  };

  return (
    <>
      <div
        className={`absolute inset-0 bg-base-100/10 backdrop-blur-[2px] bg-opacity-50 transition-opacity duration-500 z-0 ${
          isFriendsTabOpen ? "opacity-100 scale-100" : "opacity-0 scale-0"
        }`}
        onClick={() => {
          setFriendsTabOpen(false);
          setShowAllFriends(false);
        }}
      />

      {/* Popup v·ªõi translate animation */}
      <div
        className={`
          fixed inset-0 z-50 flex justify-center items-end transition-all duration-800 ease
          ${
            isFriendsTabOpen
              ? "translate-y-0"
              : "translate-y-full pointer-events-none"
          }
        `}
      >
        <div
          ref={popupRef}
          className={`
            relative w-full ${isPWA ? "h-[95vh]" : "h-[85vh]"}
            bg-base-100 flex flex-col rounded-t-4xl shadow-lg
            will-change-transform outline-2 outline-base-content outline-dashed z-50
          `}
          style={translateStyle}
        >
          {/* Drag Handle - Sticky */}
          <div
            className="sticky top-0 w-full flex justify-between items-center pt-1 px-4 active:cursor-grabbing touch-none z-10 rounded-t-4xl"
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleTouchEnd}
          >
            {/* Thanh k√©o ·ªü gi·ªØa */}
            <div className="absolute left-1/2 -translate-x-1/2 top-2">
              <div className="w-12 h-1.5 bg-base-content rounded-full" />
            </div>
            <div className="flex-1" /> {/* Spacer ƒë·ªÉ ƒë·∫©y n√∫t X sang ph·∫£i */}
            {/* N√∫t X ·ªü g√≥c ph·∫£i */}
            <button
              onClick={() => setFriendsTabOpen(false)}
              aria-label="ƒê√≥ng tab b·∫°n b√®"
              className="text-base-content focus:outline-none"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Header - Sticky */}
          <div className="sticky top-12 shadow-md z-10 flex justify-start flex-col items-center pb-2 text-primary w-full px-3">
            <div className="flex flex-col items-center space-x-2 justify-center w-full no-select">
              <h1 className="text-2xl font-semibold text-base-content sf-compact-rounded-black">
                ‚ù§Ô∏è‚Äçüî• {friendDetails.length} ng∆∞·ªùi b·∫°n
              </h1>
              <h2 className="flex flex-row items-center gap-1 font-semibold text-md mb-1 text-base-content">
                T√¨m ki·∫øm v√† th√™m b·∫°n th√¢n
              </h2>
            </div>
          </div>

          {/* Scrollable Content */}
          <div className="flex-1 overflow-y-auto px-3 py-6 space-y-6">
            {/* T√¨m ki·∫øm ng∆∞·ªùi d√πng m·ªõi */}
            <div className="w-full gap-2 space-y-2">
              <h2 className="flex flex-row items-center gap-2 text-base-content font-semibold text-md lg:text-xl mb-1">
                <FaSearchPlus size={22} /> T√¨m ki·∫øm ai ƒë√≥?
              </h2>
              <div className="flex flex-row gap-2 items-center w-full">
                <SearchInput
                  searchTerm={searchTermFind}
                  setSearchTerm={setSearchTermFind}
                  isFocused={isFocusedFind}
                  setIsFocused={setIsFocusedFind}
                  placeholder="Th√™m m·ªôt ng∆∞·ªùi b·∫°n m·ªõi..."
                />
                {searchTermFind ? (
                  <div
                    className={`btn flex flex-row items-center btn-base-200 text-sm text-base-content gap-2 cursor-pointer hover:opacity-80 ${
                      isRefreshing ? "opacity-50 cursor-not-allowed" : ""
                    }`}
                    onClick={() => handleFindFriend(searchTermFind)}
                  >
                    <span>T√¨m ki·∫øm</span>
                  </div>
                ) : null}
              </div>
              <div className="w-full flex justify-center">
                {foundUser ? (
                  <FriendFind friend={foundUser} />
                ) : (
                  <p className="text-center h-[70px] text-gray-400">
                    Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o
                  </p>
                )}
              </div>
            </div>

            {/* Danh s√°ch b·∫°n b√® */}
            <div className="w-full">
              <h1 className="flex flex-row items-center gap-2 font-semibold text-md lg:text-xl mb-1">
                <FaUserFriends size={25} className="scale-x-[-1]" /> B·∫°n b√® c·ªßa
                b·∫°n
              </h1>
              {/* Input v√† n√∫t l√†m m·ªõi c√πng h√†ng */}
              <div className="flex items-center gap-2 w-full mt-2">
                <SearchInput
                  searchTerm={searchTerm}
                  setSearchTerm={setSearchTerm}
                  isFocused={isFocused}
                  setIsFocused={setIsFocused}
                  placeholder="T√¨m ki·∫øm b·∫°n b√®..."
                />

                <div
                  className={`btn flex flex-row items-center btn-base-200 text-sm text-base-content gap-2 cursor-pointer hover:opacity-80 ${
                    isRefreshing ? "opacity-50 cursor-not-allowed" : ""
                  }`}
                  onClick={() => {
                    if (!isRefreshing) handleRefreshFriends();
                  }}
                >
                  {isRefreshing ? (
                    <>
                      <LoadingRing size={20} stroke={2} />
                      <span>ƒêang l√†m m·ªõi...</span>
                    </>
                  ) : (
                    <>
                      <RefreshCcw className="w-4 h-4" />
                      <span>L√†m m·ªõi</span>
                    </>
                  )}
                </div>
              </div>

              {/* Th·ªùi gian c·∫≠p nh·∫≠t ·ªü h√†ng ri√™ng */}
              {lastUpdated && (
                <div className="text-xs text-gray-500 mt-1 w-full">
                  C·∫≠p nh·∫≠t l·∫ßn cu·ªëi:{" "}
                  {new Date(lastUpdated).toLocaleString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                  })}
                </div>
              )}

              {/* Danh s√°ch friend items - c√≥ th·ªÉ cu·ªôn */}
              <div className="mt-4">
                {filteredFriends.length === 0 && (
                  <p className="text-center text-gray-400 mt-10">
                    Kh√¥ng c√≥ b·∫°n b√® ƒë·ªÉ hi·ªÉn th·ªã
                  </p>
                )}

                {visibleFriends
                  .slice() // t·∫°o b·∫£n copy ƒë·ªÉ kh√¥ng mutate m·∫£ng g·ªëc
                  .sort((a, b) => {
                    // Celeb l√™n tr∆∞·ªõc
                    if (a.isCelebrity === b.isCelebrity) return 0;
                    return a.isCelebrity ? -1 : 1;
                  })
                  .map((friend) => (
                    <FriendItem
                      key={friend.uid}
                      friend={friend}
                      onDelete={handleDeleteFriend}
                    />
                  ))}

                {filteredFriends.length > 3 && (
                  <div className="flex items-center gap-4 mt-4">
                    <hr className="flex-grow border-t border-base-content" />
                    <button
                      onClick={() => setShowAllFriends(!showAllFriends)}
                      className="bg-base-200 hover:bg-base-300 text-base-content font-semibold px-4 py-2 transition-colors rounded-3xl"
                    >
                      {showAllFriends ? "Thu g·ªçn" : "Xem th√™m"}
                    </button>
                    <hr className="flex-grow border-t border-base-content" />
                  </div>
                )}
              </div>
            </div>

            {/* L·ªùi m·ªùi nh·∫≠n ƒë∆∞·ª£c */}
            <div className="w-full gap-2 space-y-2">
              <IncomingFriendRequests />
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default FriendsContainer;
